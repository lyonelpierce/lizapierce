generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Category {
  id            String  @id @default(uuid())
  name          String
  slug          String  @unique
  products      Product[] @relation("CategoryToProduct")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Collection {
  id            String  @id @default(uuid())
  name          String
  slug          String  @unique
  products      Product[] @relation("CollectionToProduct")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product{
  id            String  @id @default(uuid())
  name          String
  basePrice     Int
  slug          String  @unique
  image         String
  forSale       Boolean @default(true)
  categoryId    String
  category      Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  collectionId  String
  collection    Collection @relation("CollectionToProduct", fields: [collectionId], references: [id])
  variants      Variant[]
  options       ProductOptions[]
  ratings       Rating[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProductOptions {
  id         String    @id @default(uuid())
  name       String
  productId  String
  product    Product[]
  values     String[]
}

model Rating {
  id            String    @id @default(uuid())
  value         Int       
  productId     String
  reviews       Review[]
  product       Product   @relation(fields: [productId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id            String    @id @default(uuid())
  text          String    
  ratingId      String
  rating        Rating    @relation(fields: [ratingId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Variant {
  id            String    @id @default(uuid())
  title         String
  forSale       Boolean   @default(true)
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  price         Int
  options       VariantOptions[]
  orderItems    OrderItem[]
}

model VariantOptions {
  id            String     @id @default(uuid())
  name          String
  value         String
  variant       Variant[]
}

model Order {
  id            String  @id @default(uuid())
  phone         String  @default("")
  address       String  @default("")
  email         String  @default("")
  isPaid        Boolean @default(false)
  orderItems    OrderItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OrderItem {
  id            String  @id @default(uuid())
  orderId       String
  order         Order @relation(fields: [orderId], references: [id])
  variantId     String
  variant       Variant @relation(fields: [variantId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([orderId])
  @@index([variantId])
}